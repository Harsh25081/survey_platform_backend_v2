generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// ENUMS
//////////////////////////////
enum Role {
  SYSTEM_ADMIN
  USER
}

enum SurveySendBy {
  WHATSAPP
  EMAIL
  BOTH
  NONE
}

enum FlowType {
  STATIC
  INTERACTIVE
  GAME
}

enum SurveyStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

enum ScheduleType {
  IMMEDIATE
  SCHEDULED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum QuestionType {
  TEXT
  MCQ
  RATING
  IMAGE
  VIDEO
  AUDIO
  FILE
  MATRIX
}

//////////////////////////////
// MODELS
//////////////////////////////
model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  mobile_no  String?  @unique
  password   String
  role       Role     @default(USER)
  theme      String   @default("LIGHT")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  surveys    Survey[]
}

model Survey {
  id              String           @id @default(uuid())
  title           String
  description     String?
  no_of_questions Int              @default(0)
  user            User             @relation(fields: [userId], references: [id])
  userId          String

  survey_send_by  SurveySendBy     @default(NONE)
  flow_type       FlowType         @default(STATIC)
  settings        Json             @default("{}")
  status          SurveyStatus     @default(DRAFT)
  scheduled_date  DateTime?
  scheduled_type  ScheduleType     @default(IMMEDIATE)
  is_deleted      Boolean          @default(false)

  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  questions       Question[]
  responses       Response[]
  share_tokens    ShareToken[]
  audiences       SurveyAudience[]
}

model QuestionCategory {
  id             String               @id @default(uuid())
  type_name      String               @unique
  sub_categories QuestionSubCategory[]
  questions      Question[]           // convenience if you want to query all questions in category
}

model QuestionSubCategory {
  id          String            @id @default(uuid())
  category    QuestionCategory  @relation(fields: [categoryId], references: [id])
  categoryId  String
  type_name   String
  settings    Json              @default("{}")
  questions   Question[]
}

model MediaAsset {
  id            String    @id @default(uuid())
  type          MediaType
  url           String
  thumbnail_url String?
  uploaded_by   String    @default("Anonymous")
  meta          Json      @default("{}")
  created_at    DateTime  @default(now())
}

model Question {
  id             String               @id @default(uuid())
  survey         Survey               @relation(fields: [surveyId], references: [id])
  surveyId       String

  question_type  QuestionType
  question_text  String
  options        Json                 @default("[]")
  media          Json                 @default("[]")
  order_index    Int                  @default(0)
  required       Boolean              @default(true)

  // optional category relations
  category       QuestionCategory?    @relation(fields: [categoryId], references: [id])
  categoryId     String?

  subCategory    QuestionSubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId  String?

  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt

  response_answers ResponseAnswer[]
}

model Response {
  id             String           @id @default(uuid())
  survey         Survey           @relation(fields: [surveyId], references: [id])
  surveyId       String
  user_metadata  Json             @default("{}")
  created_at     DateTime         @default(now())

  response_answers ResponseAnswer[]
}

model ResponseAnswer {
  id           String    @id @default(uuid())
  response     Response  @relation(fields: [responseId], references: [id])
  responseId   String
  question     Question  @relation(fields: [questionId], references: [id])
  questionId   String
  answer_type  String
  answer_value String?
  media        Json      @default("[]")
  submitted_at DateTime  @default(now())
  created_at   DateTime  @default(now())
}

model ShareToken {
  id               String   @id @default(uuid())
  survey           Survey   @relation(fields: [surveyId], references: [id])
  surveyId         String
  recipient_email  String?
  recipient_mobile String?
  token_hash       String
  expires_at       DateTime?
  used             Boolean  @default(false)
  created_at       DateTime @default(now())
}

model MasterAudience {
  id         String  @id @default(uuid())
  name       String?
  email      String?
  mobile_no  String?
  attributes Json    @default("{}")
}

model SurveyAudience {
  id         String   @id @default(uuid())
  survey     Survey   @relation(fields: [surveyId], references: [id])
  surveyId   String
  name       String?
  email      String?
  mobile_no  String?
  attributes Json     @default("{}")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
