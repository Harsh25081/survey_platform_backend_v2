generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// ENUMS
//////////////////////////////
enum Role {
  SYSTEM_ADMIN
  USER
}

enum SurveySendBy {
  WHATSAPP
  EMAIL
  BOTH
  NONE
}

enum FlowType {
  STATIC
  INTERACTIVE
  GAME
}

enum SurveyStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

enum ScheduleType {
  IMMEDIATE
  SCHEDULED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum QuestionType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

//////////////////////////////
// MODELS
//////////////////////////////

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  mobile_no  String?  @unique
  password   String
  role       Role     @default(USER)
  theme      String   @default("LIGHT")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  surveys    Survey[]
}

model Survey {
  id                    String           @id @default(uuid())
  title                 String
  description           String?
  no_of_questions       Int              @default(0)
  userId                String
  user                  User             @relation(fields: [userId], references: [id])

  survey_send_by        SurveySendBy     @default(NONE)
  flow_type             FlowType         @default(STATIC)
  settings              Json             @default("{}")
  status                SurveyStatus     @default(DRAFT)
  scheduled_date        DateTime?
  scheduled_type        ScheduleType     @default(IMMEDIATE)
  is_deleted            Boolean          @default(false)

  // Corrected relation to SurveyCategory
  surveyCategoryId      String?
  surveyCategory        SurveyCategory?  @relation(fields: [surveyCategoryId], references: [id])
  autoGenerateQuestions Boolean          @default(false)

  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt

  questions             Question[]
  responses             Response[]
  share_tokens          ShareToken[]
  audiences             SurveyAudience[]
  ai_generated_questions AIGeneratedQuestion[]
}

model QuestionCategory {
  id          String     @id @default(uuid())
  type_name   String     @unique
  settings    Json       @default("{}")
  questions   Question[]
  // sub_categories QuestionSubCategory[]
}

// model QuestionSubCategory {
//   id          String            @id @default(uuid())
//   category    QuestionCategory  @relation(fields: [categoryId], references: [id])
//   categoryId  String
//   type_name   String
//   settings    Json              @default("{}")
//   questions   Question[]
// }

model MediaAsset {
  id            String    @id @default(uuid())
  type          MediaType
  url           String
  thumbnail_url String?
  uploaded_by   String    @default("Anonymous")
  meta          Json      @default("{}")
  created_at    DateTime  @default(now())

  options       Option?    @relation(name: "MediaAssetToOption")
  questions     Question[]
  responseAnswer ResponseAnswer[]
}

model Option {
  id            String      @id @default(uuid())
  text          String?

  // Optional media
  mediaId       String?     @unique
  mediaAsset    MediaAsset?  @relation(name: "MediaAssetToOption",fields: [mediaId], references: [id])

   // Relations back to question types
  questionId    String
  question      Question    @relation(name:"QuestionOptions",fields: [questionId], references: [id])
  rowQuestionOptionId    String?
  rowQuestionOptions      Question?    @relation(name:"QuestionRowOptions",fields: [rowQuestionOptionId], references: [id])
  columnQuestionOptionId    String?
  columnQuestionOptions      Question?    @relation(name:"QuestionColumnOptions",fields: [columnQuestionOptionId], references: [id])

  // Linear / Rating Question Metadata
  rangeFrom     Int?
  rangeTo       Int?
  fromLabel     String?
  toLabel       String?
  icon          String?

  responseAnswer   ResponseAnswer[]
}

model Question {
  id             String               @id @default(uuid())
  surveyId       String
  survey         Survey               @relation(fields: [surveyId], references: [id])

  question_type  QuestionType
  question_text  String

  // Relations for different types of options
  options        Option[]             @relation(name: "QuestionOptions")
  rowOptions     Option[]             @relation(name: "QuestionRowOptions")
  columnOptions  Option[]             @relation(name: "QuestionColumnOptions")

  // Optional media attachment
  mediaId        String?               // Required: each question must have a media record
  mediaAsset     MediaAsset?           @relation(fields: [mediaId], references: [id])

  // Other metadata
  order_index    Int                  @default(0)
  required       Boolean              @default(true)
  categoryId     String?
  category       QuestionCategory?    @relation(fields: [categoryId], references: [id])

  // subCategory    QuestionSubCategory? @relation(fields: [subCategoryId], references: [id])
  // subCategoryId  String?

  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt

  response_answers ResponseAnswer[]
}

model Response {
  id              String           @id @default(uuid())
  surveyId        String
  survey          Survey           @relation(fields: [surveyId], references: [id])
  user_metadata   Json             @default("{}")
  created_at      DateTime         @default(now())

  response_answers ResponseAnswer[]
}

model ResponseAnswer {
  id           String         @id @default(uuid())
  responseId   String
  response     Response       @relation(fields: [responseId], references: [id])
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id])
  // answer_type  String
  answer_value String?
  mediaId     String?  
  mediaAsset   MediaAsset?    @relation(fields: [mediaId], references: [id])

  // For saving  Options in answer
  selected_option_ids Json? 
  option    Option[]
  
  scaleRatingValue Int?
    // relation for grid answers
  grid_answers  GridResponseAnswer[]

  submitted_at DateTime       @default(now())
  created_at   DateTime       @default(now())
}

 model GridResponseAnswer {
  id               String   @id @default(uuid())
  responseAnswerId String
  responseAnswer   ResponseAnswer @relation(fields: [responseAnswerId], references: [id])
  rowOptionId      String
  columnOptionId   String
  selected         Boolean  @default(false) // true if user selected
}

model ShareToken {
  id               String   @id @default(uuid())
  surveyId         String
  survey           Survey   @relation(fields: [surveyId], references: [id])
  recipient_email  String?
  recipient_mobile String?
  token_hash       String
  expires_at       DateTime?
  used             Boolean  @default(false)
  created_at       DateTime @default(now())
}

model MasterAudience {
  id         String  @id @default(uuid())
  name       String?
  email      String?
  mobile_no  String?
  attributes Json    @default("{}")
}

model SurveyAudience {
  id         String   @id @default(uuid())
  surveyId   String
  survey     Survey   @relation(fields: [surveyId], references: [id])
  name       String?
  email      String?
  mobile_no  String?
  attributes Json     @default("{}")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AIGeneratedQuestion {
  id                String      @id @default(uuid())
  surveyId          String
  survey            Survey      @relation(fields: [surveyId], references: [id])

  question_type     QuestionType
  question_text     String
  options           Json        @default("[]")
  order_index       Int         @default(0)
  required          Boolean     @default(true)

  ai_prompt         String?
  ai_model          String?
  confidence_score  Float?

  is_approved       Boolean     @default(false)
  is_added_to_survey Boolean    @default(false)

  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model SurveyCategory {
  id         String  @id @default(uuid())
  name       String  @unique
  surveys    Survey[]
}


// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// //////////////////////////////
// // ENUMS
// //////////////////////////////
// enum Role {
//   SYSTEM_ADMIN
//   USER
// }

// enum SurveySendBy {
//   WHATSAPP
//   EMAIL
//   BOTH
//   NONE
// }

// enum FlowType {
//   STATIC
//   INTERACTIVE
//   GAME
// }

// enum SurveyStatus {
//   DRAFT
//   SCHEDULED
//   PUBLISHED
// }

// enum ScheduleType {
//   IMMEDIATE
//   SCHEDULED
// }

// enum MediaType {
//   IMAGE
//   VIDEO
//   AUDIO
//   DOCUMENT
// }

// enum QuestionType {
//   TEXT
//   IMAGE
//   VIDEO
//   AUDIO
// }

// //////////////////////////////
// // MODELS
// //////////////////////////////

// model User {
//   id         String   @id @default(uuid())
//   name       String
//   email      String   @unique
//   mobile_no  String?  @unique
//   password   String
//   role       Role     @default(USER)
//   theme      String   @default("LIGHT")
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   surveys    Survey[]
// }

// model Survey {
//   id                    String           @id @default(uuid())
//   title                 String
//   description           String?
//   no_of_questions       Int              @default(0)
//   userId                String
//   user                  User             @relation(fields: [userId], references: [id])

//   survey_send_by        SurveySendBy     @default(NONE)
//   flow_type             FlowType         @default(STATIC)
//   settings              Json             @default("{}")
//   status                SurveyStatus     @default(DRAFT)
//   scheduled_date        DateTime?
//   scheduled_type        ScheduleType     @default(IMMEDIATE)
//   is_deleted            Boolean          @default(false)

//   // Corrected relation to SurveyCategory
//   surveyCategoryId      String?
//   surveyCategory        SurveyCategory?  @relation(fields: [surveyCategoryId], references: [id])
//   autoGenerateQuestions Boolean          @default(false)

//   created_at            DateTime         @default(now())
//   updated_at            DateTime         @updatedAt

//   questions             Question[]
//   responses             Response[]
//   share_tokens          ShareToken[]
//   audiences             SurveyAudience[]
//   ai_generated_questions AIGeneratedQuestion[]
// }

// model QuestionCategory {
//   id          String     @id @default(uuid())
//   type_name   String     @unique
//   settings    Json       @default("{}")

//   questions   Question[]
//   // sub_categories QuestionSubCategory[]
// }

// // model QuestionSubCategory {
// //   id          String            @id @default(uuid())
// //   category    QuestionCategory  @relation(fields: [categoryId], references: [id])
// //   categoryId  String
// //   type_name   String
// //   settings    Json              @default("{}")
// //   questions   Question[]
// // }

// model MediaAsset {
//   id            String    @id @default(uuid())
//   type          MediaType
//   url           String
//   thumbnail_url String?
//   uploaded_by   String    @default("Anonymous")
//   meta          Json      @default("{}")
//   created_at    DateTime  @default(now())

//   options       Option[]
//   questions     Question[]
//   responseAnswer ResponseAnswer[]
// }

// model Option {
//   id            String      @id @default(uuid())
//   text          String
//   mediaId       String?
//   mediaAsset    MediaAsset? @relation(fields: [mediaId], references: [id])
//   questionId    String
//   question      Question    @relation(fields: [questionId], references: [id])
// }

// model Question {
//   id             String               @id @default(uuid())
//   surveyId       String
//   survey         Survey               @relation(fields: [surveyId], references: [id])

//   question_type  QuestionType
//   question_text  String
//   options        Option[]
//   mediaId        String?
//   mediaAsset     MediaAsset?          @relation(fields: [mediaId], references: [id])
//   order_index    Int                  @default(0)
//   required       Boolean              @default(true)

//   categoryId     String?
//   category       QuestionCategory?    @relation(fields: [categoryId], references: [id])

//   // subCategory    QuestionSubCategory? @relation(fields: [subCategoryId], references: [id])
//   // subCategoryId  String?

//   created_at     DateTime             @default(now())
//   updated_at     DateTime             @updatedAt

//   response_answers ResponseAnswer[]
// }

// model Response {
//   id              String           @id @default(uuid())
//   surveyId        String
//   survey          Survey           @relation(fields: [surveyId], references: [id])
//   user_metadata   Json             @default("{}")
//   created_at      DateTime         @default(now())

//   response_answers ResponseAnswer[]
// }

// model ResponseAnswer {
//   id           String    @id @default(uuid())
//   responseId   String
//   response     Response  @relation(fields: [responseId], references: [id])
//   questionId   String
//   question     Question  @relation(fields: [questionId], references: [id])
//   answer_type  String
//   answer_value String?
//   mediaId      String?  
//   mediaAsset   MediaAsset?          @relation(fields: [mediaId], references: [id])    
//   submitted_at DateTime  @default(now())
//   created_at   DateTime  @default(now())
// }

// model ShareToken {
//   id               String   @id @default(uuid())
//   surveyId         String
//   survey           Survey   @relation(fields: [surveyId], references: [id])
//   recipient_email  String?
//   recipient_mobile String?
//   token_hash       String
//   expires_at       DateTime?
//   used             Boolean  @default(false)
//   created_at       DateTime @default(now())
// }

// model MasterAudience {
//   id         String  @id @default(uuid())
//   name       String?
//   email      String?
//   mobile_no  String?
//   attributes Json    @default("{}")
// }

// model SurveyAudience {
//   id         String   @id @default(uuid())
//   surveyId   String
//   survey     Survey   @relation(fields: [surveyId], references: [id])
//   name       String?
//   email      String?
//   mobile_no  String?
//   attributes Json     @default("{}")
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
// }

// model AIGeneratedQuestion {
//   id                String      @id @default(uuid())
//   surveyId          String
//   survey            Survey      @relation(fields: [surveyId], references: [id])

//   question_type     QuestionType
//   question_text     String
//   options           Json        @default("[]")
//   order_index       Int         @default(0)
//   required          Boolean     @default(true)

//   ai_prompt         String?
//   ai_model          String?
//   confidence_score  Float?

//   is_approved       Boolean     @default(false)
//   is_added_to_survey Boolean    @default(false)

//   created_at        DateTime    @default(now())
//   updated_at        DateTime    @updatedAt
// }

// model SurveyCategory {
//   id         String  @id @default(uuid())
//   name       String  @unique
//   surveys    Survey[]
// }


// // generator client {
// //   provider = "prisma-client-js"
// // }

// // datasource db {
// //   provider = "postgresql"
// //   url      = env("DATABASE_URL")
// // }

// // //////////////////////////////
// // // ENUMS
// // //////////////////////////////
// // enum Role {
// //   SYSTEM_ADMIN
// //   USER
// // }

// // enum SurveySendBy {
// //   WHATSAPP
// //   EMAIL
// //   BOTH
// //   NONE
// // }

// // enum FlowType {
// //   STATIC
// //   INTERACTIVE
// //   GAME
// // }

// // enum SurveyStatus {
// //   DRAFT
// //   SCHEDULED
// //   PUBLISHED
// // }

// // enum ScheduleType {
// //   IMMEDIATE
// //   SCHEDULED
// // }

// // enum MediaType {
// //   IMAGE
// //   VIDEO
// //   AUDIO
// //   DOCUMENT
// // }

// // enum QuestionType {
// //   TEXT
// //   IMAGE
// //   VIDEO
// //   AUDIO
// // }

// // //////////////////////////////
// // // MODELS
// // //////////////////////////////
// // model User {
// //   id         String   @id @default(uuid())
// //   name       String
// //   email      String   @unique
// //   mobile_no  String?  @unique
// //   password   String
// //   role       Role     @default(USER)
// //   theme      String   @default("LIGHT")
// //   created_at DateTime @default(now())
// //   updated_at DateTime @updatedAt

// //   surveys    Survey[]
// // }

// // model Survey {
// //   id              String           @id @default(uuid())
// //   title           String
// //   description     String?
// //   no_of_questions Int              @default(0)
// //   userId          String
// //   user            User             @relation(fields: [userId], references: [id])

// //   survey_send_by      SurveySendBy     @default(NONE)
// //   flow_type           FlowType         @default(STATIC)
// //   settings            Json             @default("{}")
// //   status              SurveyStatus     @default(DRAFT)
// //   scheduled_date      DateTime?
// //   scheduled_type      ScheduleType     @default(IMMEDIATE)
// //   is_deleted          Boolean          @default(false)

// //   // New fields for AI generation
// //   categoryOfSurvey    String?
// //   surveyCategory      SurveyCategory?  @relation(fields: [categoryOfSurvey], references: [id])
// //   autoGenerateQuestions Boolean        @default(false)

// //   created_at      DateTime         @default(now())
// //   updated_at      DateTime         @updatedAt

// //   questions           Question[]
// //   responses           Response[]
// //   share_tokens        ShareToken[]
// //   audiences           SurveyAudience[]
// //   ai_generated_questions AIGeneratedQuestion[]
// // }

// // model QuestionCategory {
// //   id             String               @id @default(uuid())
// //   type_name      String               @unique
// //   settings    Json              @default("{}")
// //   // sub_categories QuestionSubCategory[]
// //   questions      Question[]           // convenience if you want to query all questions in category
// // }

// // // model QuestionSubCategory {
// // //   id          String            @id @default(uuid())
// // //   category    QuestionCategory  @relation(fields: [categoryId], references: [id])
// // //   categoryId  String
// // //   type_name   String
// // //   settings    Json              @default("{}")
// // //   questions   Question[]
// // // }

// // model MediaAsset {
// //   id            String    @id @default(uuid())
// //   type          MediaType
// //   url           String
// //   thumbnail_url String?
// //   uploaded_by   String    @default("Anonymous")
// //   meta          Json      @default("{}")
// //   created_at    DateTime  @default(now())

// //   options       Option[]
// // }

// // model Option {
// //   id            String    @id @default((uuid()))
// //   text          String
// //   mediaId       String
// //   mediaAsset    MediaAsset   @relation(fields: [mediaId],references: [id])
// //   questionId    String
// //   question      Question     @relation((fields: [questionId],references: [id]))
// // }

// // model Question {
// //   id             String               @id @default(uuid())
// //   survey         Survey               @relation(fields: [surveyId], references: [id])
// //   surveyId       String

// //   question_type  QuestionType
// //   question_text  String
// //   optionIds        Json                 @default("[]")
// //   options           Option[]
// //   mediaId          String                 @default("")
// //   order_index    Int                  @default(0)
// //   required       Boolean              @default(true)

// //   // optional category relations
// //   category       QuestionCategory?    @relation(fields: [categoryId], references: [id])
// //   categoryId     String?

// //   // subCategory    QuestionSubCategory? @relation(fields: [subCategoryId], references: [id])
// //   // subCategoryId  String?

// //   created_at     DateTime             @default(now())
// //   updated_at     DateTime             @updatedAt

// //   response_answers ResponseAnswer[]
// // }

// // model Response {
// //   id             String           @id @default(uuid())
// //   survey         Survey           @relation(fields: [surveyId], references: [id])
// //   surveyId       String
// //   user_metadata  Json             @default("{}")
// //   created_at     DateTime         @default(now())

// //   response_answers ResponseAnswer[]
// // }

// // model ResponseAnswer {
// //   id           String    @id @default(uuid())
// //   response     Response  @relation(fields: [responseId], references: [id])
// //   responseId   String
// //   question     Question  @relation(fields: [questionId], references: [id])
// //   questionId   String
// //   answer_type  String
// //   answer_value String?
// //   media        Json      @default("[]")
// //   submitted_at DateTime  @default(now())
// //   created_at   DateTime  @default(now())
// // }

// // model ShareToken {
// //   id               String   @id @default(uuid())
// //   survey           Survey   @relation(fields: [surveyId], references: [id])
// //   surveyId         String
// //   recipient_email  String?
// //   recipient_mobile String?
// //   token_hash       String
// //   expires_at       DateTime?
// //   used             Boolean  @default(false)
// //   created_at       DateTime @default(now())
// // }

// // model MasterAudience {
// //   id         String  @id @default(uuid())
// //   name       String?
// //   email      String?
// //   mobile_no  String?
// //   attributes Json    @default("{}")
// // }

// // model SurveyAudience {
// //   id         String   @id @default(uuid())
// //   survey     Survey   @relation(fields: [surveyId], references: [id])
// //   surveyId   String
// //   name       String?
// //   email      String?
// //   mobile_no  String?
// //   attributes Json     @default("{}")
// //   created_at DateTime @default(now())
// //   updated_at DateTime @updatedAt
// // }

// // model AIGeneratedQuestion {
// //   id             String      @id @default(uuid())
// //   survey         Survey      @relation(fields: [surveyId], references: [id])
// //   surveyId       String

// //   question_type  QuestionType
// //   question_text  String
// //   options        Json        @default("[]")
// //   order_index    Int         @default(0)
// //   required       Boolean     @default(true)

// //   // AI generation metadata
// //   ai_prompt      String?     // The prompt used to generate this question
// //   ai_model       String?     // The AI model used (e.g., "gpt-3.5-turbo")
// //   confidence_score Float?    // AI confidence score if available

// //   is_approved    Boolean     @default(false)  // Whether user approved this question
// //   is_added_to_survey Boolean @default(false)  // Whether this question was added to actual survey

// //   created_at     DateTime    @default(now())
// //   updated_at     DateTime    @updatedAt
// // }

// // model SurveyCategory {
// //   id         String  @id @default(uuid())
// //   name       String  @unique

// //   surveys    Survey[]
// // }